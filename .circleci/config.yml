version: 2

aliases:
  - defaults: &defaults
      docker:
        - image: circleci/node:8
      working_directory: ~/browse
  - &restore-repo-cache
      key: repo-{{ .Environment.CIRCLE_SHA1 }}
  - &restore-yarn-cache
      keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
  - &save-yarn-cache
      key: yarn-packages-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
        - ~/.cache/yarn
  - &yarn
    |
      yarn install --non-interactive --cache-folder ~/.cache/yarn --frozen-lockfile
  - &restore-bower-cache
      key: bower-components-{{ checksum "bower.json" }}
  - &save-bower-cache
      key: bower-components-{{ checksum "bower.json" }}
      paths:
        - bower_components
  - &restore-bundler-cache
      key: bundle-{{ checksum "Gemfile.lock" }}
  - &save-bundler-cache
      key: bundle-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle

jobs:
  checkout_code:
    <<: *defaults

    steps:
      - checkout
      - save_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/browse

  package_dependencies:
    <<: *defaults
    docker:
      - image: circleci/ruby:2.5.1-node

    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - run: *yarn
      - save-cache: *save-yarn-cache
      - restore-cache: *restore-bower-cache
      - run: yarn run bower install
      - save-cache: *save-bower-cache

  test_cases:
    <<: *defaults

    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - run:
          name: Start Ember test server
          command: yarn run ember server --port 4202
          background: true
      - run:
          name: Wait for Ember test server to start
          command: dockerize -wait tcp://localhost:4202 -timeout 1m
      - run:
          name: Run Ember tests
          command: COVERAGE=true yarn run ember test
          environment:
            COVERAGE: true
      - persist_to_workspace:
          root: .
          paths:
            - coverage*/lcov.info

  upload-coverage:
    <<: *defaults
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - attach_workspace:
          at: ~/browse
      - run:
          name: Upload coverage results to Code Climate
          command: |
            yarn run codeclimate-test-reporter < coverage*/lcov.info

  www_build:
    <<: *defaults
    environment:
      EMBER_CLI_CORDOVA: "0"
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - run:
          name: Set Environment variables
          command: |
            echo 'export APP_SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)' >> $BASH_ENV
            echo 'export staging=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo false; else echo true; fi)' >> $BASH_ENV
      - run:
          name: Print Environment variables
          command: |
            echo APP_SHA=$APP_SHA
            echo EMBER_CLI_CORDOVA=$EMBER_CLI_CORDOVA
            echo staginng=$staging
      - run: yarn run ember build --environment=production
      - run: mv dist/ dist-www
      - persist_to_workspace:
          root: .
          paths:
            - dist-www/

  www-deploy:
    <<: *defaults

    docker:
      - image: circleci/ruby:2.5.1-node
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-bundler-cache
      - run: bundle check --path=vendor/bundle || bundle install --deployment --jobs=4 --retry=3
      - save-cache: *save-bundler-cache
      - attach_workspace:
          at: ~/browse
      - run: mv dist-www/ dist
      - run:
          name: Setup Environment
          command: |
            echo 'export STAGE=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)' >> $BASH_ENV
            echo 'export APP_VERSION=$(jq -r ".version" package.json)' >> $BASH_ENV
      - run:
          name: Print Environment Variables
          command: |
            echo STAGE=$STAGE
            echo APP_VERSION=$APP_VERSION
      - run: bundle exec cap $STAGE deploy:upload

  ember_cordova_build:
    <<: *defaults
    environment:
        EMBER_CLI_CORDOVA: "1"
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - run:
          name: Setup Environment variables
          command: |
            echo 'export APP_SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)' >> $BASH_ENV
            echo 'export APP_VERSION=$(jq -r ".version" package.json)' >> $BASH_ENV
      - run:
          name: Print Environment variables
          command: |
              echo EMBER_CLI_CORDOVA=$EMBER_CLI_CORDOVA
              echo APP_SHA=$APP_SHA
              echo staging=$staging
              echo APP_VERSION=$APP_VERSION
      - run: yarn run ember build --environment=production
      - run: mv dist/ cordova-dist
      - persist_to_workspace:
          root: .
          paths:
            - cordova-dist/

  android_build:
    <<: *defaults
    docker:
      - image: circleci/android:api-26-node8-alpha
    environment:
      JVM_OPTS: -Xmx3200m
      KEYSTORE: goodcity.keystore
      GOODCITY_KEYSTORE_ALIAS: "GoodCity Admin"
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - attach_workspace:
          at: ~/browse
      - run: mv cordova-dist/ cordova/www
      - run:
          name: Setup Environment variables
          command: |
              echo 'export APP_NAME=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo Browse GoodCity; else echo S. Browse GoodCity; fi)' >> $BASH_ENV
              echo 'export APP_ID=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo hk.goodcity.browse; else echo hk.goodcity.browsestaging; fi)' >> $BASH_ENV
              echo 'export APP_VERSION=$(jq -r ".version" package.json)' >> $BASH_ENV
              echo 'export ENVIRONMENT=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)' >> $BASH_ENV
              echo 'export PATH=$PATH:`yarn bin`' >> $BASH_ENV
              echo 'export BUILD=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo --release; else echo --debug; fi)' >> $BASH_ENV
              echo 'export PATH=$PATH:$ANDROID_HOME/tools/gradle/bin' >> $BASH_ENV
      - run: azure-filestore download -f "${KEYSTORE}" && mv "${KEYSTORE}" cordova/
      - run: azure-filestore download -d google-play -f "${GOOGLE_PLAY_KEY_FILE}" && mv "${GOOGLE_PLAY_KEY_FILE}" fastlane/
      - run:
          name: Install Gradle 3.3
          command: |
              wget -O /tmp/gradle.zip https://downloads.gradle.org/distributions/gradle-3.3-bin.zip
              unzip -d $ANDROID_HOME/tools /tmp/gradle.zip
              mv $ANDROID_HOME/tools/gradle-3.3 $ANDROID_HOME/tools/gradle
      - run:
          name: Apply App settings
          command: cordova-update-config --appname ${APP_NAME} --appid ${APP_ID} --appversion ${APP_VERSION}
          working_directory: cordova
      - run:
          name: Cordova Prepare
          command: cordova prepare android
          working_directory: cordova
      - run:
          name: Cordova Compile
          command: |
            cordova compile android "${BUILD}" --device -- --keystore="${KEYSTORE}" --storePassword="${GOODCITY_KEYSTORE_PASSWORD}" \
              --alias="${GOODCITY_KEYSTORE_ALIAS}" --password="${GOODCITY_KEYSTORE_PASSWORD}"
          working_directory: cordova
      - store_artifacts:
          path: /home/circleci/code/cordova/platforms/android/build/outputs/apk/

workflows:
    version: 2
    build-test-and-deploy:
      jobs:
        - checkout_code
        - package_dependencies:
            requires:
              - checkout_code
        - test_cases:
            requires:
              - package_dependencies
        # - upload-coverage:
        #     requires:
        #       - package_dependencies
        #       - test_cases
        # - www_build:
        #     requires:
        #       - upload-coverage
        # - www-deploy:
        #     requires:
        #       - www_build
        - ember_cordova_build:
            requires:
              - package_dependencies
        - android_build:
            requires:
              - ember_cordova_build
